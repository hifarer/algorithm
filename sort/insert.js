
let randomArray = require('../utils/random-array')

let arr = randomArray(15)
console.log(arr)

/**
 * 插入排序
 * 思路：
 * 将数组的一部分视为已排序好，这一部分最开始是数组的第一个元素
 * 将未排序部分的第一个元素取出，和已排序部分从后往前比较，如果被比较的元素大于待排序的元素，则将被比较的元素往后移动；否则在被比较的元素后面插入待排序的元素
 */
for (let i = 1; i < arr.length; i++) {
  let j = i - 1 // 排好序部分的最后一个的索引
  // arr[i]表示未排序部分的第一个元素，这里要存一下，因为已排序部分中被比较的元素可能需要往后移动
  let item = arr[i]
  // arr[j]表示排好序部分的最后一个元素
  while (arr[j] > item && j >= 0) {
    arr[j + 1] = arr[j]
    j--
  }
  // 最终arr[j]是小于item的，把item放它后面
  arr[j + 1] = item
}
console.log(arr)

/**
 * 算法复杂度，每一项为比较的次数
 * 1 + 2 + ... + n - 2 + n - 1
 * (n - 1 + 1) + (n - 2 + 2)
 * n*n/2
 * n^2/2
 * n^2
 */

// 插入排序算法的运行并不需要额外的存储空间，所以空间复杂度是 O(1)，所以这是一个原地排序算法。

// 插入排序算法将后面出现的元素，插入到前面出现元素的后面，可以保持原有的前后顺序不变，所以插入排序是稳定的排序算法。

// 折半插入排序，可以将待排序的元素与排好序的折半比较